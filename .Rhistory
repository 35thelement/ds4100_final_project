BilateralMigration <- read.csv("/data/Bilateral_Migration.csv")
getwd()
BilateralMigration <- read.csv("./data/Bilateral_Migration.csv")
Population <- read.csv("/data/Global_Population.csv")
Population <- read.csv("./data/Global_Population.csv")
View(BilateralMigration)
?row.names()
row.names(BilateralMigration)
?colnames()
colnames(BilateralMigration)
install.packages("neo4r")
##################################################
# GBMDB data cleaning and loading into Neo4j     #
##################################################
if (!"neo4r" %in% rownames(installed.packages())) {
install.packages("neo4r")
} else library(neo4r)
colnames(BilateralMigration)
?select
if (!"tidyverse" %in% rownames(installed.packages())) {
install.packages("tidyverse")
}
library(tidyverse)
?select
BilateralMigration <- select(read.csv("./data/Bilateral_Migration.csv"), 1, 3, 5, 7, 8, 9, 10, 11)
View(BilateralMigration)
colnames(BilateralMigration)
View(Population)
select(Population, -1, -4)
Population <- select(read.csv("./data/Global_Population.csv"),-1,-4)
colnames(Population)
BilateralMigration <- select(read.csv("./data/Bilateral_Migration.csv"),1,3,5,7,8,9,10,11)
colnames(BilateralMigration) <- c("Country_Origin","Migration_by_Gender","Country_Dest","y1960","y1970","y1980","y1990","y2000")
str_detect(BilateralMigration$y1960, "\\.\\.")
str_detect(BilateralMigration$Country_Dest, "\\.\\.")
TRUE %in% str_detect(BilateralMigration$Country_Dest, "\\.\\.")
TRUE %in% str_detect(BilateralMigration$Country_Origin, "\\.\\.")
TRUE %in% str_detect(BilateralMigration$Migration_by_Gender, "\\.\\.")
BilateralMigration[BilateralMigration$y1960 == 0.0]
BilateralMigration[y1960 == 0.0]
BilateralMigration$y1960[BilateralMigration$y1960 == 0.0]
BilateralMigration <- read.csv("./data/Bilateral_Migration.csv")
Population <- read.csv("./data/Global_Population.csv")
Population <- read.csv("./data/Population.csv")
colnames(BilateralMigration)
View(BilateralMigration)
BilateralMigration <- select(read.csv("./data/Bilateral_Migration.csv"),-4)
colnames(BilateralMigration)
colnames(BilateralMigration) <- c("Origin_Country","Origin_Code","Migration_by_Gender","Dest_Name","Dest_Code","y1960","y1970","y1980","y1990","y2000")
BilateralMigration <- BilateralMigration[rowSums(is.na(BilateralMigration)) != ncol(BilateralMigration),]
colnames(Population)
View(Population)
colnames(Population) <- c("Series_Name","Series_Code","Country_Name","Country_Code","y1960","y1970","y1980","y1990","y2000")
Population <- Population[rowSums(is.na(Population)) != ncol(Population)]
Population <- Population[rowSums(is.na(Population)) != ncol(Population),]
Population[rowSums(is.na(Population)),]
Population[is.na(Population),]
View(BilateralMigration)
View(BilateralMigration)
BilateralMigration[6,40]
is.na(BilateralMigration[6,40])
is.null(BilateralMigration[6,40])
BilateralMigration <- select(read.csv("./data/Bilateral_Migration.csv"),-4)
Population <- read.csv("./data/Population.csv")
colnames(BilateralMigration) <- c("Origin_Country","Origin_Code","Migration_by_Gender","Dest_Name","Dest_Code","y1960","y1970","y1980","y1990","y2000")
BilateralMigration <- BilateralMigration[rowSums(is.null(BilateralMigration)) != 0,]
?rowSums
BilateralMigration <- select(read.csv("./data/Bilateral_Migration.csv"),-4)
Population <- read.csv("./data/Population.csv")
colnames(BilateralMigration) <- c("Origin_Country","Origin_Code","Migration_by_Gender","Dest_Name","Dest_Code","y1960","y1970","y1980","y1990","y2000")
BilateralMigration <- BilateralMigration[complete.cases(BilateralMigration),]
colnames(Population) <- c("Series_Name","Series_Code","Country_Name","Country_Code","y1960","y1970","y1980","y1990","y2000")
Population <- Population[complete.cases(Population),]
View(BilateralMigration)
# load data
BilateralMigration <- select(read.csv("./data/Bilateral_Migration.csv"),-4)
Population <- read.csv("./data/Population.csv")
Population[!complete.cases(Population)]
Population[!complete.cases(Population),]
BilateralMigration[!complete.cases(BilateralMigration),]
# rename columns and remove rows with missing data
colnames(BilateralMigration) <- c("Origin_Country","Origin_Code","Migration_by_Gender","Dest_Name","Dest_Code","y1960","y1970","y1980","y1990","y2000")
BilateralMigration[!complete.cases(BilateralMigration),][!is.na(BilateralMigration$y1960),]
BilateralMigration[!complete.cases(BilateralMigration),][!is.null(BilateralMigration$y1960),]
BilateralMigration[!complete.cases(BilateralMigration),][6,]
BilateralMigration[!complete.cases(BilateralMigration),6]
is.null(BilateralMigration[!complete.cases(BilateralMigration),6])
BilateralMigration[!complete.cases(BilateralMigration),6] %>% summarise(non_na = sum(!is.na()))
BilateralMigration[!complete.cases(BilateralMigration),] %>% summarise(non_na = sum(!is.na(y1960)))
BilateralMigration[!complete.cases(BilateralMigration),] %>% summarise(non_na = sum(!is.na(y1970)))
BilateralMigration[!complete.cases(BilateralMigration),] %>% summarise(non_na = sum(!is.na(y1980)))
BilateralMigration[!complete.cases(BilateralMigration),] %>% summarise(non_na = sum(!is.na(y1990)))
BilateralMigration[!complete.cases(BilateralMigration),] %>% summarise(non_na = sum(!is.na(y2000)))
# connect to neo4j
con <- neo4j_api$new(
url = "http://localhost:7474",
user = "Remy LeWinter",
password = "Remus2041"
)
con$ping()
con$get_constraints()
con$labels
con$user
con$url
# connect to neo4j
con <- neo4j_api$new(
url = "http://localhost:7474",
user = "Remy LeWinter",
password = rstudioapi::askForPassword()
)
?getPass
??getPass
??getPass::getPass
?rstudioapi::askForPassword
# connect to neo4j
con <- neo4j_api$new(
url = "http://localhost:7474",
user = rstudioapi::askForPassword("Please enter your username"),
password = rstudioapi::askForPassword()
)
con$user
con$auth
?source
source("./populate_neo4j.R")
source("populate_neo4j.R")
source("populate_neo4j.R")
# run the script to populate the database
source("populate_neo4j.R")
?source
?commandArgs
print(commandArgs())
?textInput
# connect to neo4j
con <- neo4j_api$new(
url = "http://localhost:7474",
user = rstudioapi::askForPassword("Please enter your username"),
password = rstudioapi::askForPassword()
)
filter(BilateralMigration, Origin_Country=="Afghanistan" && Dest_Name=="Algeria")
# load data
BilateralMigration <- select(read.csv("./data/Bilateral_Migration.csv"),-4)
# rename columns
colnames(BilateralMigration) <- c("Origin_Name","Origin_Code","Migration_by_Gender","Dest_Name","Dest_Code","y1960","y1970","y1980","y1990","y2000")
filter(BilateralMigration, Origin_Name=="Afghanistan" && Dest_Name=="Algeria")
filter(BilateralMigration, 'Origin_Name=="Afghanistan" && Dest_Name=="Algeria"')
filter(BilateralMigration, Origin_Code=="AFG" && Dest_Name=="DZA")
View(BilateralMigration)
filter(BilateralMigration, Origin_Code=="AFG" && Dest_Code=="DZA")
# Pages to-do:
# - front page with report as outlined in project requirements (we have prof's ok to do it like this)
# - interactive network
#   - color nodes based on region or income group (default region)
#   - display all migration and population data for a country on mouse-over or click
#   - display data for either one year or all years cumulatively, population only for single years (default all)
#   - select population, immigration, or emmigration for node sizing (default population if single year, none otherwise)
#   - group countries by region and/or income group (default none)
#   - display all countries at 1, 2, or 3 degrees of separation to a selected country (default none, i.e. all countries)
# - line/bar charts
#   - time series of all data for a selected country
#   - time series of immigration and emmigration between two selected countries (possibly on separate page)
# - analysis of migration network (do these for each year, and all years cumulatively)
#   - find clustering coefficient of migration network
#   - use connected components algorithm to determine if graph is connected
#   - use Louvain algorithm for (hierarchical?) community detection (use Cypher projection)
# - boxplots, t-tests, regressions
# - [optional] cypher query input (sanitize!) with query output downloader (using temp files)
# Load required packages and install them if necessary
if (!"flexdashboard" %in% rownames(installed.packages())) {
install.packages("flexdashboard")
}
library(flexdashboard)
if (!"shiny" %in% rownames(installed.packages())) {
install.packages("shiny")
}
library(shiny)
if (!"visNetwork" %in% rownames(installed.packages())) {
install.packages("visNetwork")
}
library(visNetwork)
if (!"ggplot2" %in% rownames(installed.packages())) {
install.packages("ggplot2")
}
library(ggplot2)
if (!"tidyverse" %in% rownames(installed.packages())) {
install.packages("tidyverse")
}
library(tidyverse)
if (!"neo4r" %in% rownames(installed.packages())) {
install.packages("neo4r")
}
library(neo4r)
source("populate_neo4j.R")
# Pages to-do:
# - front page with report as outlined in project requirements (we have prof's ok to do it like this)
# - interactive network
#   - color nodes based on region or income group (default region)
#   - display all migration and population data for a country on mouse-over or click
#   - display data for either one year or all years cumulatively, population only for single years (default all)
#   - select population, immigration, or emmigration for node sizing (default population if single year, none otherwise)
#   - group countries by region and/or income group (default none)
#   - display all countries at 1, 2, or 3 degrees of separation to a selected country (default none, i.e. all countries)
# - line/bar charts
#   - time series of all data for a selected country
#   - time series of immigration and emmigration between two selected countries (possibly on separate page)
# - analysis of migration network (do these for each year, and all years cumulatively)
#   - find clustering coefficient of migration network
#   - use connected components algorithm to determine if graph is connected
#   - use Louvain algorithm for (hierarchical?) community detection (use Cypher projection)
# - boxplots, t-tests, regressions
# - [optional] cypher query input (sanitize!) with query output downloader (using temp files)
# Load required packages and install them if necessary
if (!"flexdashboard" %in% rownames(installed.packages())) {
install.packages("flexdashboard")
}
library(flexdashboard)
if (!"shiny" %in% rownames(installed.packages())) {
install.packages("shiny")
}
library(shiny)
if (!"visNetwork" %in% rownames(installed.packages())) {
install.packages("visNetwork")
}
library(visNetwork)
if (!"ggplot2" %in% rownames(installed.packages())) {
install.packages("ggplot2")
}
library(ggplot2)
if (!"tidyverse" %in% rownames(installed.packages())) {
install.packages("tidyverse")
}
library(tidyverse)
if (!"neo4r" %in% rownames(installed.packages())) {
install.packages("neo4r")
}
library(neo4r)
source("populate_neo4j.R")
# connect to Neo4j
# make sure to start a database connection in Desktop and verify the port number -- see documentation
con <- neo4j_api$new(
url = "http://localhost:7687",
user = "neo4j",
password = "neo4j"
)
# clear the database
call_neo4j("MATCH (n) DETACH DELETE n", con)
##### Read and modify data with R
# read data
BilateralMigration <- select(read.csv("./data/Bilateral_Migration.csv", na.strings=c("","NA")),-4)
Population <- read.csv("./data/Population.csv", na.strings=c("","NA"))
IncomeRegion <- select(read.csv("./data/Country_Metadata.csv", na.strings=c("","NA")), 1, 3, 4)
# rename columns
colnames(BilateralMigration) <- c("Origin_Name","Origin_Code","Migration_by_Gender","Dest_Name","Dest_Code","y1960","y1970","y1980","y1990","y2000")
colnames(Population) <- c("Series_Name","Series_Code","Country_Name","Country_Code","y1960","y1970","y1980","y1990","y2000")
colnames(IncomeRegion) <- c("Country_Code","Income_Name","Region_Name")
# If you run the commented line of code for each of the years, you will see that rows with missing values have no data.
# Therefore we select only rows with complete cases.
#BilateralMigration[!complete.cases(BilateralMigration),] %>% summarise(non_na = sum(!is.na(y2000)))
BilateralMigration <- BilateralMigration[complete.cases(BilateralMigration),]
# gather the years and spread the genders
BilateralMigration <- gather(BilateralMigration, key="Year", value="Mig", y1960, y1970, y1980, y1990, y2000)
BilateralMigration$Year <- BilateralMigration$Year %>% str_sub(2, 5)
BilateralMigration <- spread(BilateralMigration, Migration_by_Gender, Mig)
# Replace "Series_Name" and "Series_Code" in Population with a single field
Population <- Population %>%
mutate(Population_by_Gender = Series_Code %>%
str_replace("SP\\.POP\\.TOTL\\.MA\\.IN", "Male") %>%
str_replace("SP\\.POP\\.TOTL\\.FE\\.IN", "Female") %>%
str_replace("SP\\.POP\\.TOTL", "Total")) %>%
select(Country_Name, Country_Code, Population_by_Gender, y1960, y1970, y1980, y1990, y2000)
# Gather the years and spread the genders
Population <- gather(Population, key="Year", value="Pop", y1960, y1970, y1980, y1990, y2000)
Population$Year <- Population$Year %>% str_sub(2, 5)
Population <- Population[complete.cases(Population),] # we can take complete cases now that years are gathered
Population <- spread(Population,Population_by_Gender,Pop)
# Filter Population to only contain data on countries found in BilateralMigration.
# It is ok if there is migration but not population data for some countries.
# Since all countries in BilateralMigration are both origins and destinations (run commented line to verify), we only need use one.
#setdiff(BilateralMigration$Dest_Code), BilateralMigration$Origin_Code)
Population <- Population %>% filter(Country_Code %in% BilateralMigration$Origin_Code)
# IncomeRegion contains rows with missing data.
# All of these are for aggregates and demographic groups, so we'll take only complete cases.
IncomeRegion <- IncomeRegion[complete.cases(IncomeRegion),]
# Create codes for income and region data
IncomeRegion$Income_Code <- IncomeRegion$Income_Name %>%
str_replace("High income", "H") %>%
str_replace("Low income", "L") %>%
str_replace("Lower middle income", "LM") %>%
str_replace("Upper middle income", "UM")
IncomeRegion$Region_Code <- IncomeRegion$Region_Name %>%
str_replace("East Asia & Pacific", "EAP") %>%
str_replace("Europe & Central Asia", "ECA") %>%
str_replace("Latin America & Caribbean", "LAC") %>%
str_replace("Middle East & North Africa", "MENA") %>%
str_replace("North America", "NA") %>%
str_replace("South Asia", "SA") %>%
str_replace("Sub-Saharan Africa", "SAA")
# If you run the two commented lines below, you'll see that the same 8 rows in IncomeRegion
# do not appear in Population or BilateralMigration. Remove those rows.
#setdiff(IncomeRegion$Country_Code, BilateralMigration$Origin_Code)
#setdiff(IncomeRegion$Country_Code, Population$Country_Code)
IncomeRegion <- IncomeRegion %>% filter(Country_Code %in% Population$Country_Code)
##### Save modified data to csv
write.csv(BilateralMigration, file="./data/final/Bilateral_Migration_Final.csv", row.names=F)
write.csv(Population, file="./data/final/Population_Final.csv", row.names=F)
write.csv(IncomeRegion, file="./data/final/Income_Region_Final.csv", row.names=F)
##### Load into Neo4j
# constraints
send_cypher("./constraints.cypher", con)
# countries, migrations, and years
on_load_mig <-
'MERGE (o:Country {code: csvLine.Origin_Code, name: csvLine.Origin_Name})
MERGE (d:Country {code: csvLine.Dest_Code, name: csvLine.Dest_Name})
MERGE (y:Year {name: toInteger(csvLine.Year)})
MERGE (m:Migration {female: toInteger(csvLine.Female), male: toInteger(csvLine.Male), total: toInteger(csvLine.Total)})
MERGE (o)-[:EMMIGRATION]->(m)-[:IMMIGRATION]->(d)
MERGE (m)-[:IN_YEAR]->(y);'
mig_path <- str_c("file://", getwd(), "/data/final/Bilateral_Migration_Final.csv")
load_csv(url=mig_path, con=con, on_load=on_load_mig, as="csvLine")
# population
on_load_pop <-
'MATCH (c:Country {code: csvLine.Country_Code})
MERGE (p:Population {total: toInteger(csvLine.Total)})
FOREACH(ignoreMe IN CASE WHEN trim(csvLine.Female) <> "" THEN [1] ELSE [] END | SET p.female = toInteger(csvLine.Female))
FOREACH(ignoreMe IN CASE WHEN trim(csvLine.Male) <> "" THEN [1] ELSE [] END | SET p.male = toInteger(csvLine.Male))
MATCH (y:Year {name: toInteger(csvLine.Year)})
MERGE (c)-[:POPULATION]->(p)-[:IN_YEAR]->(y);'
pop_path <- str_c("file://", getwd(),"/data/final/Population_Final.csv")
load_csv(url=pop_path, con=con, on_load=on_load_pop, as="csvLine")
# income and region
on_load_ir <-
'MATCH (c:Country {code: csvLine.Country_Code})
MERGE (c)-[:INCOME]->(:Income {code: csvLine.Income_Code, name: csvLine.Income_Name})
MERGE (c)-[:REGION]->(:Region {code: csvLine.Income_Code, name: csvLine.Income_Name});'
ir_path <- str_c("file://", getwd(), "/data/final/Income_Region_Final.csv")
load_csv(url=ir_path, con=con, on_load=on_load_ir, as="csvLine")
# Now that the data is in Neo4j, let's free up some RAM
rm(BilateralMigration, IncomeRegion, Population)
# Pages to-do:
# - front page with report as outlined in project requirements (we have prof's ok to do it like this)
# - interactive network
#   - color nodes based on region or income group (default region)
#   - display all migration and population data for a country on mouse-over or click
#   - display data for either one year or all years cumulatively, population only for single years (default all)
#   - select population, immigration, or emmigration for node sizing (default population if single year, none otherwise)
#   - group countries by region and/or income group (default none)
#   - display all countries at 1, 2, or 3 degrees of separation to a selected country (default none, i.e. all countries)
# - line/bar charts
#   - time series of all data for a selected country
#   - time series of immigration and emmigration between two selected countries (possibly on separate page)
# - analysis of migration network (do these for each year, and all years cumulatively)
#   - find clustering coefficient of migration network
#   - use connected components algorithm to determine if graph is connected
#   - use Louvain algorithm for (hierarchical?) community detection (use Cypher projection)
# - boxplots, t-tests, regressions
# - [optional] cypher query input (sanitize!) with query output downloader (using temp files)
# Load required packages and install them if necessary
if (!"flexdashboard" %in% rownames(installed.packages())) {
install.packages("flexdashboard")
}
library(flexdashboard)
if (!"shiny" %in% rownames(installed.packages())) {
install.packages("shiny")
}
library(shiny)
if (!"visNetwork" %in% rownames(installed.packages())) {
install.packages("visNetwork")
}
library(visNetwork)
if (!"ggplot2" %in% rownames(installed.packages())) {
install.packages("ggplot2")
}
library(ggplot2)
if (!"tidyverse" %in% rownames(installed.packages())) {
install.packages("tidyverse")
}
library(tidyverse)
if (!"neo4r" %in% rownames(installed.packages())) {
install.packages("neo4r")
}
library(neo4r)
source("populate_neo4j.R")
